@page "/settings"
@using hassio_onedrive_backup.Contracts;
@using hassio_onedrive_backup.Hass;
@using hassio_onedrive_backup.Storage;
@using hassio_onedrive_backup;
@using onedrive_backup.Models;
@inject AddonOptions AddonOptions
@inject SettingsFields SettingsReader
@inject IHassioClient hassioClient
@inject IJSRuntime JS
@inject ConsoleLogger Logger

<div class="p-3 container-fluid fullheight @(AddonOptions.DarkMode ? "body-dark-mode": "body-light-mode")">
    <EditForm Model="@AddonOptions" OnValidSubmit="Save" OnInvalidSubmit="InvalidSubmit" class="@(AddonOptions.DarkMode ? "text-white": "text-dark")">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@

        <h3>General</h3>
        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.dark_mode.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.dark_mode.name" @bind="newOptions.DarkMode">
                @SettingsReader.Settings.dark_mode.name
            </label>
        </div>


        <div class="mb-3">
            <label for="hassApiTimeoutMinutes" class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.hass_api_timeout_minutes.description">@SettingsReader.Settings.hass_api_timeout_minutes.name</label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="30" id="@SettingsReader.Settings.hass_api_timeout_minutes.name" @bind="newOptions.HassAPITimeoutMinutes" placeholder="30" required>
        </div>


        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.notify_on_error.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.notify_on_error.name" @bind="newOptions.NotifyOnError">
                @SettingsReader.Settings.notify_on_error.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.enable_anonymous_telemetry.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.enable_anonymous_telemetry.name" @bind="newOptions.EnableAnonymousTelemetry">
                @SettingsReader.Settings.enable_anonymous_telemetry.name
            </label>
        </div>

        <div class="mb-3">
            <label class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.log_level.description">@SettingsReader.Settings.log_level.name</label>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="verbose" value="verbose"
                       checked="@(AddonOptions.LogLevelStr == "verbose")" @onchange="LogLevelChanged">
                <label class="form-check-label" for="verbose">Verbose</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="info" value="info"
                       checked="@(AddonOptions.LogLevelStr == "info")" @onchange="LogLevelChanged">
                <label class="form-check-label" for="info">Info</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="warning" value="warning"
                       checked="@(AddonOptions.LogLevelStr == "warning")" @onchange="LogLevelChanged">
                <label class="form-check-label" for="info">Warning</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="error" value="error"
                       checked="@(AddonOptions.LogLevelStr == "error")" @onchange="LogLevelChanged">
                <label class="form-check-label" for="info">Error</label>
            </div>
        </div>

        <h3>Backup</h3>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.local_backup_num_to_keep.name"
                   class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.local_backup_num_to_keep.description">
                @SettingsReader.Settings.local_backup_num_to_keep.name
            </label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="0" id="@SettingsReader.Settings.local_backup_num_to_keep.name" placeholder="0" @bind="newOptions.MaxLocalBackups" required>
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.onedrive_backup_num_to_keep.name"
                   class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.onedrive_backup_num_to_keep.description">
                @SettingsReader.Settings.onedrive_backup_num_to_keep.name
            </label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="1" id="@SettingsReader.Settings.onedrive_backup_num_to_keep.name" placeholder="1" @bind="newOptions.MaxOnedriveBackups" required>
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.backup_interval_days.name" class="form-label"
                   data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.backup_interval_days.description">@SettingsReader.Settings.backup_interval_days.name</label>
            <input type="number" min="0.1" step="0.1" class="form-control @(AddonOptions.DarkMode ? "dark": "")" id="@SettingsReader.Settings.backup_interval_days.name" placeholder="1" @bind="newOptions.BackupIntervalDays" required>
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.generational_days.name" class="form-label"
                   data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.generational_days.description">@SettingsReader.Settings.generational_days.name</label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="0" id="@SettingsReader.Settings.generational_days.name" placeholder="GenDays (Optional)" @bind="newOptions.GenerationalDays">
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.generational_weeks.name" class="form-label"
                   data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.generational_weeks.description">@SettingsReader.Settings.generational_weeks.name</label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="0" id="@SettingsReader.Settings.generational_weeks.name" placeholder="GenWeeks (Optional)" @bind="newOptions.GenerationalWeeks">
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.generational_months.name" class="form-label"
                   data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.generational_months.description">@SettingsReader.Settings.generational_months.name</label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="0" id="@SettingsReader.Settings.generational_months.name" placeholder="GenMonths (Optional)" @bind="newOptions.GenerationalMonths">
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.generational_years.name" class="form-label"
                   data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.generational_years.description">@SettingsReader.Settings.generational_years.name</label>
            <input type="number" class="form-control @(AddonOptions.DarkMode ? "dark": "")" min="0" id="@SettingsReader.Settings.generational_years.name" placeholder="GenYears (Optional)" @bind="newOptions.GenerationalYears">
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.backup_name.name" class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.backup_name.description">@SettingsReader.Settings.backup_name.name</label>
            <input type="text" class="form-control @(AddonOptions.DarkMode ? "dark": "")" pattern="[A\-Za\-z0\-9\_]+" id="@SettingsReader.Settings.backup_name.name" placeholder="hass_backup" @bind="newOptions.BackupName" required>
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.backup_instance_name.name" class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.backup_instance_name.description">@SettingsReader.Settings.backup_instance_name.name</label>
            <input type="text" class="form-control @(AddonOptions.DarkMode ? "dark": "")" pattern="[A\-Za\-z0\-9\_]+" id="@SettingsReader.Settings.backup_instance_name.name" @bind="newOptions.InstanceName" placeholder="Enter backup instance name (Optional)">
        </div>

        <div class="mb-3">
            <label for="@SettingsReader.Settings.backup_allowed_hours.name" class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.backup_allowed_hours.description">@SettingsReader.Settings.backup_allowed_hours.name</label>
            <input type="text" class="form-control @(AddonOptions.DarkMode ? "dark": "")" pattern="[0-9,\-]+" id="@SettingsReader.Settings.backup_allowed_hours.name" @bind="newOptions.BackupAllowedHours" placeholder="Enter allowed hours (e.g. 1-4) (Optional)">
        </div>

        <div class="mb-3">
            <label for="backupPasswd" class="form-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.backup_passwd.description">@SettingsReader.Settings.backup_passwd.name</label>
            <input type="password" class="form-control @(AddonOptions.DarkMode ? "dark": "")" id="@SettingsReader.Settings.backup_passwd.name" @bind="newOptions.BackupPassword" placeholder="Enter password (Optional)">
        </div>

        <div class="mb-3">
            <label class="form-label" data-bs-toggle="tooltip"
                   data-bs-title="@SettingsReader.Settings.excluded_addons.description">@SettingsReader.Settings.excluded_addons.name</label>
            @for (var idx = 0; idx < AddonOptions.ExcludedAddons.Count; idx++)
            {
                var tmpIdx = idx;
                <div class="mb-3">
                    <input type="text" class="form-control @(AddonOptions.DarkMode ? "dark": "")" placeholder="Addon Name to exclude (Optional)" value="@AddonOptions.ExcludedAddons[idx]"
                    @onchange="e => UpdateExcludedAddons(e, tmpIdx)" />
                </div>
            }

        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.monitor_all_local_backups.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.monitor_all_local_backups.name" @bind="newOptions.MonitorAllLocalBackups" />
                @SettingsReader.Settings.monitor_all_local_backups.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.ignore_upgrade_backups.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.ignore_upgrade_backups.name" @bind="newOptions.IgnoreUpgradeBackups" />
                @SettingsReader.Settings.ignore_upgrade_backups.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.exclude_media_folder.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.exclude_media_folder.name" @bind="newOptions.ExcludeMediaFolder" />
                @SettingsReader.Settings.exclude_media_folder.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.exclude_ssl_folder.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.exclude_ssl_folder.name" @bind="newOptions.ExcludeSSLFolder" />
                @SettingsReader.Settings.exclude_ssl_folder.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.exclude_share_folder.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.exclude_share_folder.name" @bind="newOptions.ExcludeShareFolder" />
                @SettingsReader.Settings.exclude_share_folder.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.exclude_local_addons_folder.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.exclude_local_addons_folder.name" @bind="newOptions.ExcludeLocalAddonsFolder" />
                @SettingsReader.Settings.exclude_local_addons_folder.name
            </label>
        </div>

        <h3>File Sync</h3>


        <div class="mb-3">
            <label class="form-label" data-bs-toggle="tooltip"
                   data-bs-title="@SettingsReader.Settings.sync_paths.description">@SettingsReader.Settings.sync_paths.name</label>
            @for (var idx = 0; idx < AddonOptions.SyncPaths.Count; idx++)
            {
                var tmpIdx = idx;
                <div class="mb-3">
                    <input type="text" class="form-control @(AddonOptions.DarkMode ? "dark": "")" placeholder="Enter path (Optional)" value="@AddonOptions.SyncPaths[idx]"
                    @onchange="e => UpdateSyncPath(e, tmpIdx)" />
                </div>
            }

        </div>


        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.file_sync_remove_deleted.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.file_sync_remove_deleted.name" @bind="newOptions.FileSyncRemoveDeleted" />
                @SettingsReader.Settings.file_sync_remove_deleted.name
            </label>
        </div>

        <div class="mb-3 form-switch">
            <label class="form-check-label" data-bs-toggle="tooltip" data-bs-title="@SettingsReader.Settings.ignore_allowed_hours_for_file_sync.description">
                <input type="checkbox" class="form-check-input" role="switch" id="@SettingsReader.Settings.ignore_allowed_hours_for_file_sync.name" @bind="newOptions.IgnoreAllowedHoursForFileSync" />
                @SettingsReader.Settings.ignore_allowed_hours_for_file_sync.name
            </label>
        </div>

        <button type="submit" class="btn btn-primary position-fixed bottom-0 end-0 m-4 mb-5">Save Settings</button>
    </EditForm>
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
        <div id="saveToast" class="toast bg-primary text-white" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <span>&#x2713;</span>
                <strong class="me-auto"> Saved</strong>
                <small>OneDrive Backup Addon</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Settings have been updated.
            </div>
        </div>
    </div>
</div>

@code {
    private AddonOptions newOptions = new AddonOptions();

    protected override void OnInitialized()
    {
        AddonOptions.OnOptionsChanged += TriggerStateChanged;
        newOptions.CopyValuesFromInstance(AddonOptions);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addTooltips");
            await JS.InvokeVoidAsync("addToasts");
            await JS.InvokeVoidAsync("hideSettingsPopover");
        }

        if (string.IsNullOrWhiteSpace(newOptions.SyncPaths.LastOrDefault()) == false || newOptions.SyncPaths.Any() == false)
        {
            newOptions.SyncPaths.Add(string.Empty);
            TriggerStateChanged();
        }

        if (string.IsNullOrWhiteSpace(newOptions.ExcludedAddons.LastOrDefault()) == false || newOptions.ExcludedAddons.Any() == false)
        {
            newOptions.ExcludedAddons.Add(string.Empty);
            TriggerStateChanged();
        }
    }

    private async Task Save()
    {
        await AddonOptionsManager.WriteOptions(newOptions);
        AddonOptions.CopyValuesFromInstance(newOptions);
        AddonOptions.RaiseOptionsChanged();
        await JS.InvokeVoidAsync("showSaveToast");
        TriggerStateChanged();
    }

    private async Task InvalidSubmit()
    {
        await JS.InvokeVoidAsync("scrollToTop");
    }

    private void UpdateSyncPath(ChangeEventArgs e, int index)
    {
        var val = e.Value.ToString();
        newOptions.SyncPaths[index] = val;
    }

    private void UpdateExcludedAddons(ChangeEventArgs e, int index)
    {
        newOptions.ExcludedAddons[index] = e.Value.ToString();
    }

    private void LogLevelChanged(ChangeEventArgs e)
    {
        newOptions.LogLevelStr = e.Value.ToString();
    }

    private async void TriggerStateChanged()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}