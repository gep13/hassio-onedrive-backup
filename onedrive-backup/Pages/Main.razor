@page "/"
@using hassio_onedrive_backup.Contracts;
@using hassio_onedrive_backup.Graph;
@using hassio_onedrive_backup;
@using onedrive_backup.Extensions;
@using onedrive_backup.Models;
@using static hassio_onedrive_backup.Contracts.HassBackupsResponse;
@inject IGraphHelper GraphHelper
@inject Orchestrator Orchestrator

<div class="container">
    @if (GraphHelper.IsAuthenticated == false)
    {
        <div class="alert alert-danger">
            <strong>Not logged in!</strong> @GraphHelper.AuthPrompt
        </div>
    }
    <div class="row justify-content-center">
        <div class="col-12 d-flex justify-content-center">
            <onedrive_backup.Shared.OneDriveSummaryCard />
        </div>
    </div>
</div>
<div class="container">
    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var backup in Backups)
        {
            <div class="col">
                <onedrive_backup.Shared.BackupCard Backup="@backup" />
            </div>
        }
    </div>
</div>

@code
{
    private List<BackupModel> Backups => GetBackupModels();

    private IEnumerable<BackupModel> _onedriveBackups = Enumerable.Empty<BackupModel>();

    private IEnumerable<BackupModel> _localBackups = Enumerable.Empty<BackupModel>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GraphHelper.AuthStatusChangedEventHandler -= OnAuthStatusChanged;
        GraphHelper.AuthStatusChangedEventHandler += OnAuthStatusChanged;
        Orchestrator.BackupManager.OneDriveBackupsUpdated -= OnOneDriveBackupsUpdated;
        Orchestrator.BackupManager.OneDriveBackupsUpdated += OnOneDriveBackupsUpdated;
        Orchestrator.BackupManager.LocalBackupsUpdated -= OnLocalBackupsUpdated;
        Orchestrator.BackupManager.LocalBackupsUpdated += OnLocalBackupsUpdated;
    }

    private async void OnOneDriveBackupsUpdated(IEnumerable<OnedriveBackup> onedriveBackups)
    {
        _onedriveBackups = onedriveBackups.Select(backup => backup.ToBackupModel());
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void OnLocalBackupsUpdated(IEnumerable<Backup> localBackups)
    {
        _localBackups = localBackups.Select(backup => backup.ToBackupModel());
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private List<BackupModel> GetBackupModels()
    {
        var ret = new List<BackupModel>(_onedriveBackups);
        foreach (var localBackup in _localBackups)
        {
            if (_onedriveBackups.Any(oneDriveBackup => oneDriveBackup.Slug == localBackup.Slug))
            {
                var syncedBackup = ret.Find(backup => backup.Slug == localBackup.Slug);
                syncedBackup.Location = BackupModel.BackupLocation.Both;
                continue;
            }

            ret.Add(localBackup);
        }

        return ret;
    }
    private async void OnAuthStatusChanged()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}    