@using hassio_onedrive_backup;
@using hassio_onedrive_backup.Contracts;
@using onedrive_backup.Contracts;
@using onedrive_backup.Extensions;
@using onedrive_backup.Hass;
@using onedrive_backup.Models;
@using hassio_onedrive_backup.Storage;

@inject Orchestrator Orchestrator;
@inject AddonOptions AddonOptions;
@inject IJSRuntime JS
@inject IDateTimeProvider DateTimeProvider;
@inject BackupAdditionalData BackupAdditionalData;

<div class="card mb-3 w-100 h-100 @(AddonOptions.DarkMode ? "text-white bg-secondary": "text-dark bg-light")" style="min-width: 16rem">
    <div class="card-header  @(AddonOptions.DarkMode ? "text-light" : "text-dark") ">
        <div class="row">
            <div class="col-8">
                @**************Add Badges*****************@
                @if (Backup.Type != null)
                {
                    <span class="badge rounded-pill m-1 @BackupTypeColor" data-bs-toggle="tooltip" data-bs-title="Backup is @Backup.Type">@char.ToUpper(@Backup.Type[0])@Backup.Type.Substring(1)</span>
                }
                @if (Backup.Location == BackupModel.BackupLocation.OneDrive || Backup.Location == BackupModel.BackupLocation.Both)
                {
                    <span class="badge rounded-pill m-1 bg-primary" data-bs-toggle="tooltip" data-bs-title="Backup is in OneDrive">OneDrive</span>
                }
                @if (Backup.Location == BackupModel.BackupLocation.Local || Backup.Location == BackupModel.BackupLocation.Both)
                {
                    <span class="badge rounded-pill m-1 bg-dark" data-bs-toggle="tooltip" data-bs-title="Backup is in Home Assistant">Local</span>
                }
                @if (Backup.IsProtected)
                {
                    <span class="badge rounded-pill m-1 bg-dark" data-bs-toggle="tooltip" data-bs-title="Backup is password protected">Protected</span>
                }
                @***************@
            </div>
            <div class="col text-end">
                <span class="small">@timeAgoText</span>
            </div>
        </div>
    </div>
    <div class="card-body  @(AddonOptions.DarkMode ? "text-white bg-dark": "text-dark bg-light")">
        <h6 class="card-title">@Backup.DisplayName</h6>
        <h7 class="card-subtitle @(AddonOptions.DarkMode ? "text-white": "text-muted")">@(Backup.Date)</h7>
        @if (Backup.Size > 0)
        {
            <div class="card-text">@Backup.Size MB</div>
        }
        <div class="collapse" id="details-@Backup.Slug">
            @if (Backup.Folders != null && Backup.Folders.Any())
            {
                <div class="card-text">
                    <p><strong>Folders:</strong>@string.Join(", ", Backup.Folders)</p>
                </div>
            }
        </div>
    </div>
    <div class="card-footer d-flex">

        @*Upload Button*@
        <button type="button" @onclick="UploadBackup" class="btn btn-sm m-1 @(AddonOptions.DarkMode ? "btn-outline-info": "btn-outline-primary")" data-bs-toggle="tooltip" data-bs-title="Upload backup to OneDrive" disabled="@(uploading || Backup.Location != BackupModel.BackupLocation.Local)">
            @if (uploading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                @* <span class="bi bi-cloud-upload-fill">Uploading @uploadPercent%</span> *@
            }
            else
            {
                <i class="bi bi-cloud-arrow-up"></i>
            }
        </button>

        @*Download Button*@
        <button type="button" @onclick="DownloadBackup" class="btn btn-sm m-1 @(AddonOptions.DarkMode ? "btn-outline-info": "btn-outline-primary")" data-bs-toggle="tooltip" data-bs-title="Download Backup to Home Assistant" disabled="@(downloading || Backup.Location != BackupModel.BackupLocation.OneDrive)">
            @if (downloading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi bi-cloud-arrow-down"></i>
            }
        </button>

        @*Details Button*@
        <button type="button" class="btn btn-sm m-1 @(AddonOptions.DarkMode ? "btn-outline-info": "btn-outline-primary")" data-bs-toggle="collapse" data-bs-target="#details-@Backup.Slug" disabled="@detailsDisabled">
            <i class="bi bi-chevron-expand"></i>
            <span title="Backup details">Details</span>
        </button>

        <div class="vr"></div>

        @*Retain Local Button*@
        <input type="checkbox" @oninput="RetainLocal" @bind="Backup.RetainLocal" id="retain-local-chk-@Backup.Slug" class="btn-check btn-sm m-1" autocomplete="off" disabled="@(Backup.Location == BackupModel.BackupLocation.OneDrive)">
        </input>
        <label class="btn btn-sm m-1 @(AddonOptions.DarkMode ? "btn-outline-info": "btn-outline-primary")" for="retain-local-chk-@Backup.Slug" data-bs-toggle="tooltip" data-bs-title="Retain local backup indefinitely">
            <i class="bi bi-floppy"></i>
        </label>

        @*Retain OneDrive Button*@
        <input type="checkbox" @oninput="RetainOneDrive" @bind="Backup.RetainOneDrive" id="retain-onedrive-chk-@Backup.Slug" class="btn-sm m-1 btn-check" autocomplete="off" disabled="@(Backup.Location == BackupModel.BackupLocation.Local)">
        </input>
        <label class="btn btn-sm m-1 @(AddonOptions.DarkMode ? "btn-outline-info": "btn-outline-primary")" for="retain-onedrive-chk-@Backup.Slug" data-bs-toggle="tooltip" data-bs-title="Retain OneDrive backup indefinitely">
            <i class="bi bi-cloudy-fill"></i>
        </label>

        <div class="vr"></div>

        @if (transferSpeed > 0)
        {
            @if (uploading)
            {
                <span class="text-end ms-auto my-auto @(AddonOptions.DarkMode ? "text-white": "text-dark")">Uploading @uploadPercent%</span>
            }

            @if (downloading)
            {
                <span class="text-end ms-auto my-auto @(AddonOptions.DarkMode ? "text-white": "text-dark")">Downloading @downloadPercent%</span>
            }

            <span class="text-end ms-auto my-auto @(AddonOptions.DarkMode ? "text-white": "text-dark")">@TransferSpeedText</span>
        }
    </div>
</div>


@code {
    private bool uploading = false;
    private bool downloading = false;
    private int uploadPercent = 0;
    private int downloadPercent = 0;
    private int transferSpeed = 0;

    [Parameter]
    public BackupModel Backup { get; set; }

    public string BackupTypeColor => Backup.Type.Equals("full", StringComparison.OrdinalIgnoreCase) ? "bg-info" : AddonOptions.DarkMode ? "bg-light text-dark" : "bg-secondary";

    private bool detailsDisabled => (Backup.Addons?.Count() > 0 || Backup.Folders?.Count() > 0) ? false : true;

    private string timeAgoText => CalculateTimeAgoText();

    private string TransferSpeedText => ViewHelpers.GetSpeedDisplayText(transferSpeed / 1000);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AddonOptions.OnOptionsChanged += TriggerStateChanged;
    }

    private string CalculateTimeAgoText()
    {
        TimeSpan timeAgo = DateTimeProvider.Now - Backup.Date;
        if (timeAgo.TotalDays >= 1)
        {
            var intDays = Math.Floor(timeAgo.TotalDays);
            return $"{intDays} day{(intDays >= 2 ? "s" : "")} ago";
        }
        else if (timeAgo.TotalHours > 1)
        {
            var intHours = Math.Floor(timeAgo.TotalHours);
            return $"{intHours} hour{(intHours >= 2 ? "s" : "")} ago";
        }
        else if (timeAgo.Minutes > 1)
        {
            var intMinutes = Math.Floor(timeAgo.TotalMinutes);
            return $"{intMinutes} minute{(intMinutes >= 2 ? "s" : "")} ago";
        }
        else
        {
            return "Now";
        }        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addTooltips");
        }
    }

    private async void UploadBackup()
    {
        uploading = true;
        uploadPercent = 0;
        var backup = Backup.ToBackup();
        await Orchestrator.BackupManager.UploadLocalBackupToOneDrive(backup, updateHassEntityState: false, progressCallback: (prog, speed) =>
        {
            uploadPercent = prog ?? 0;
            transferSpeed = speed ?? 0;
            TriggerStateChanged();

        });
        uploading = false;
        transferSpeed = 0;
        await Orchestrator.BackupManager.GetOnlineBackupsAsync(AddonOptions.InstanceName);
    }

    private async void RetainLocal(ChangeEventArgs e)
    {
        BackupAdditionalData.UpdateRetainLocally(Backup.Slug, (bool)e.Value);
        await LocalStorage.StoreBackupData(BackupAdditionalData);
        await Orchestrator.BackupManager.UpdateHassEntity();
    }

    private async void RetainOneDrive(ChangeEventArgs e)
    {
        BackupAdditionalData.UpdateRetainOneDrive(Backup.Slug, (bool)e.Value);
        await LocalStorage.StoreBackupData(BackupAdditionalData);
        await Orchestrator.BackupManager.UpdateHassEntity();
    }

    private async void DownloadBackup()
    {
        downloading = true;
        downloadPercent = 0;
        var onedriveBackup = Backup.ToOneDriveBackup();
        await Orchestrator.BackupManager.DownloadBackupFromOneDrive(onedriveBackup, updateHassEntityState: false, progressCallback: (prog) =>
        {
            downloadPercent = prog ?? 0;
            TriggerStateChanged();
        });

        downloading = false;
        await Orchestrator.BackupManager.RefreshLocalBackups();
    }

    private async void TriggerStateChanged()
    {
        await InvokeAsync(() =>
    {
        StateHasChanged();
    });

    }
}
