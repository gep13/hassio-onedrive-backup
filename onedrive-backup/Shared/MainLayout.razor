@using hassio_onedrive_backup.Graph;
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IGraphHelper GraphHelper
@inject IJSRuntime JS

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg">
        <a class="navbar-brand" href="#">OneDrive Backup</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Overview
            </NavLink>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link" href="about" Match="NavLinkMatch.All">
                <span class="oi oi-question-mark" aria-hidden="true"></span> About
            </NavLink>
        </div>
    </nav>
    @if (GraphHelper.IsAuthenticated == false)
    {
        <div class="alert alert-danger">
            <strong>Not logged in!</strong> To sign in to OneDrive, navigate to <a href="@GraphHelper.AuthUrl" class="alert-link" target="_blank">@GraphHelper.AuthUrl</a> and enter the code @GraphHelper.AuthCode to authenticate.
            <button type="button" class="btn btn-sm m-1 btn-light" @onclick="CopyCodeToClipboard"><span class="oi oi-clipboard" title="Copy code to clipboard"></span></button>
        </div>
    }
</div>

<div class="container">
    @Body
</div>

<footer>
    <p>&copy; Nir Lavi</p>
</footer>

@code{
    protected override void OnInitialized()
    {
        base.OnInitialized();
        GraphHelper.AuthStatusChangedEventHandler -= OnStateChanged;
        GraphHelper.AuthStatusChangedEventHandler += OnStateChanged;
    }

    private void CopyCodeToClipboard()
    {
        JS.InvokeVoidAsync("copyToClipboard", GraphHelper.AuthCode);
    }

    private async void OnStateChanged()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}